/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.newsletter.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.training.newsletter.model.NewsletterIssue;
import com.liferay.training.newsletter.model.NewsletterIssueModel;
import com.liferay.training.newsletter.model.NewsletterIssueSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NewsletterIssue service. Represents a row in the &quot;TS_NewsletterIssue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NewsletterIssueModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsletterIssueImpl}.
 * </p>
 *
 * @author Son Truong
 * @see NewsletterIssueImpl
 * @generated
 */
@JSON(strict = true)
public class NewsletterIssueModelImpl
	extends BaseModelImpl<NewsletterIssue> implements NewsletterIssueModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a newsletter issue model instance should use the <code>NewsletterIssue</code> interface instead.
	 */
	public static final String TABLE_NAME = "TS_NewsletterIssue";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"newsletterIssueId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"issueNumber", Types.INTEGER}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"issueDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"resourcePrimKey", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newsletterIssueId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issueNumber", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("resourcePrimKey", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table TS_NewsletterIssue (uuid_ VARCHAR(75) null,newsletterIssueId LONG not null primary key,companyId LONG,groupId LONG,issueNumber INTEGER,title VARCHAR(75) null,description VARCHAR(75) null,issueDate DATE null,status INTEGER,resourcePrimKey LONG)";

	public static final String TABLE_SQL_DROP = "drop table TS_NewsletterIssue";

	public static final String ORDER_BY_JPQL =
		" ORDER BY newsletterIssue.issueDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY TS_NewsletterIssue.issueDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long RESOURCEPRIMKEY_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long ISSUEDATE_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NewsletterIssue toModel(NewsletterIssueSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NewsletterIssue model = new NewsletterIssueImpl();

		model.setUuid(soapModel.getUuid());
		model.setNewsletterIssueId(soapModel.getNewsletterIssueId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setIssueNumber(soapModel.getIssueNumber());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setIssueDate(soapModel.getIssueDate());
		model.setStatus(soapModel.getStatus());
		model.setResourcePrimKey(soapModel.getResourcePrimKey());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NewsletterIssue> toModels(
		NewsletterIssueSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<NewsletterIssue> models = new ArrayList<NewsletterIssue>(
			soapModels.length);

		for (NewsletterIssueSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public NewsletterIssueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _newsletterIssueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNewsletterIssueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _newsletterIssueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NewsletterIssue.class;
	}

	@Override
	public String getModelClassName() {
		return NewsletterIssue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NewsletterIssue, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NewsletterIssue, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsletterIssue, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NewsletterIssue)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NewsletterIssue, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NewsletterIssue, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NewsletterIssue)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NewsletterIssue, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NewsletterIssue, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, NewsletterIssue>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			NewsletterIssue.class.getClassLoader(), NewsletterIssue.class,
			ModelWrapper.class);

		try {
			Constructor<NewsletterIssue> constructor =
				(Constructor<NewsletterIssue>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<NewsletterIssue, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<NewsletterIssue, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<NewsletterIssue, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<NewsletterIssue, Object>>();
		Map<String, BiConsumer<NewsletterIssue, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<NewsletterIssue, ?>>();

		attributeGetterFunctions.put("uuid", NewsletterIssue::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<NewsletterIssue, String>)NewsletterIssue::setUuid);
		attributeGetterFunctions.put(
			"newsletterIssueId", NewsletterIssue::getNewsletterIssueId);
		attributeSetterBiConsumers.put(
			"newsletterIssueId",
			(BiConsumer<NewsletterIssue, Long>)
				NewsletterIssue::setNewsletterIssueId);
		attributeGetterFunctions.put(
			"companyId", NewsletterIssue::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<NewsletterIssue, Long>)NewsletterIssue::setCompanyId);
		attributeGetterFunctions.put("groupId", NewsletterIssue::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<NewsletterIssue, Long>)NewsletterIssue::setGroupId);
		attributeGetterFunctions.put(
			"issueNumber", NewsletterIssue::getIssueNumber);
		attributeSetterBiConsumers.put(
			"issueNumber",
			(BiConsumer<NewsletterIssue, Integer>)
				NewsletterIssue::setIssueNumber);
		attributeGetterFunctions.put("title", NewsletterIssue::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<NewsletterIssue, String>)NewsletterIssue::setTitle);
		attributeGetterFunctions.put(
			"description", NewsletterIssue::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<NewsletterIssue, String>)
				NewsletterIssue::setDescription);
		attributeGetterFunctions.put(
			"issueDate", NewsletterIssue::getIssueDate);
		attributeSetterBiConsumers.put(
			"issueDate",
			(BiConsumer<NewsletterIssue, Date>)NewsletterIssue::setIssueDate);
		attributeGetterFunctions.put("status", NewsletterIssue::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<NewsletterIssue, Integer>)NewsletterIssue::setStatus);
		attributeGetterFunctions.put(
			"resourcePrimKey", NewsletterIssue::getResourcePrimKey);
		attributeSetterBiConsumers.put(
			"resourcePrimKey",
			(BiConsumer<NewsletterIssue, Long>)
				NewsletterIssue::setResourcePrimKey);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getNewsletterIssueId() {
		return _newsletterIssueId;
	}

	@Override
	public void setNewsletterIssueId(long newsletterIssueId) {
		_newsletterIssueId = newsletterIssueId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public int getIssueNumber() {
		return _issueNumber;
	}

	@Override
	public void setIssueNumber(int issueNumber) {
		_issueNumber = issueNumber;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_issueDate = issueDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getResourcePrimKey() {
		return _resourcePrimKey;
	}

	@Override
	public void setResourcePrimKey(long resourcePrimKey) {
		_columnBitmask |= RESOURCEPRIMKEY_COLUMN_BITMASK;

		if (!_setOriginalResourcePrimKey) {
			_setOriginalResourcePrimKey = true;

			_originalResourcePrimKey = _resourcePrimKey;
		}

		_resourcePrimKey = resourcePrimKey;
	}

	@Override
	public boolean isResourceMain() {
		return true;
	}

	public long getOriginalResourcePrimKey() {
		return _originalResourcePrimKey;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NewsletterIssue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NewsletterIssue toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NewsletterIssue>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewsletterIssueImpl newsletterIssueImpl = new NewsletterIssueImpl();

		newsletterIssueImpl.setUuid(getUuid());
		newsletterIssueImpl.setNewsletterIssueId(getNewsletterIssueId());
		newsletterIssueImpl.setCompanyId(getCompanyId());
		newsletterIssueImpl.setGroupId(getGroupId());
		newsletterIssueImpl.setIssueNumber(getIssueNumber());
		newsletterIssueImpl.setTitle(getTitle());
		newsletterIssueImpl.setDescription(getDescription());
		newsletterIssueImpl.setIssueDate(getIssueDate());
		newsletterIssueImpl.setStatus(getStatus());
		newsletterIssueImpl.setResourcePrimKey(getResourcePrimKey());

		newsletterIssueImpl.resetOriginalValues();

		return newsletterIssueImpl;
	}

	@Override
	public int compareTo(NewsletterIssue newsletterIssue) {
		int value = 0;

		value = DateUtil.compareTo(
			getIssueDate(), newsletterIssue.getIssueDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NewsletterIssue)) {
			return false;
		}

		NewsletterIssue newsletterIssue = (NewsletterIssue)object;

		long primaryKey = newsletterIssue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalResourcePrimKey = _resourcePrimKey;

		_setOriginalResourcePrimKey = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NewsletterIssue> toCacheModel() {
		NewsletterIssueCacheModel newsletterIssueCacheModel =
			new NewsletterIssueCacheModel();

		newsletterIssueCacheModel.uuid = getUuid();

		String uuid = newsletterIssueCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			newsletterIssueCacheModel.uuid = null;
		}

		newsletterIssueCacheModel.newsletterIssueId = getNewsletterIssueId();

		newsletterIssueCacheModel.companyId = getCompanyId();

		newsletterIssueCacheModel.groupId = getGroupId();

		newsletterIssueCacheModel.issueNumber = getIssueNumber();

		newsletterIssueCacheModel.title = getTitle();

		String title = newsletterIssueCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			newsletterIssueCacheModel.title = null;
		}

		newsletterIssueCacheModel.description = getDescription();

		String description = newsletterIssueCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			newsletterIssueCacheModel.description = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			newsletterIssueCacheModel.issueDate = issueDate.getTime();
		}
		else {
			newsletterIssueCacheModel.issueDate = Long.MIN_VALUE;
		}

		newsletterIssueCacheModel.status = getStatus();

		newsletterIssueCacheModel.resourcePrimKey = getResourcePrimKey();

		return newsletterIssueCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NewsletterIssue, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NewsletterIssue, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsletterIssue, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((NewsletterIssue)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<NewsletterIssue, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<NewsletterIssue, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsletterIssue, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((NewsletterIssue)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NewsletterIssue>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _newsletterIssueId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private int _issueNumber;
	private String _title;
	private String _description;
	private Date _issueDate;
	private int _status;
	private long _resourcePrimKey;
	private long _originalResourcePrimKey;
	private boolean _setOriginalResourcePrimKey;
	private long _columnBitmask;
	private NewsletterIssue _escapedModel;

}