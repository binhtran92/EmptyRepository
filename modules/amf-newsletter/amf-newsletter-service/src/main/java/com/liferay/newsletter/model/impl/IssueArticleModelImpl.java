/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.newsletter.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.newsletter.model.IssueArticle;
import com.liferay.newsletter.model.IssueArticleModel;
import com.liferay.newsletter.model.IssueArticleSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the IssueArticle service. Represents a row in the &quot;NL_IssueArticle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>IssueArticleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueArticleImpl}.
 * </p>
 *
 * @author quanhuynhces
 * @see IssueArticleImpl
 * @generated
 */
@JSON(strict = true)
public class IssueArticleModelImpl
	extends BaseModelImpl<IssueArticle> implements IssueArticleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue article model instance should use the <code>IssueArticle</code> interface instead.
	 */
	public static final String TABLE_NAME = "NL_IssueArticle";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"issueArticleId", Types.BIGINT},
		{"issueNumber", Types.BIGINT}, {"title", Types.VARCHAR},
		{"author", Types.VARCHAR}, {"order_", Types.BIGINT},
		{"content", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueArticleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issueNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("order_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NL_IssueArticle (uuid_ VARCHAR(75) null,issueArticleId LONG not null primary key,issueNumber LONG,title VARCHAR(75) null,author VARCHAR(75) null,order_ LONG,content STRING null)";

	public static final String TABLE_SQL_DROP = "drop table NL_IssueArticle";

	public static final String ORDER_BY_JPQL =
		" ORDER BY issueArticle.issueArticleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NL_IssueArticle.issueArticleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ISSUEARTICLEID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IssueArticle toModel(IssueArticleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IssueArticle model = new IssueArticleImpl();

		model.setUuid(soapModel.getUuid());
		model.setIssueArticleId(soapModel.getIssueArticleId());
		model.setIssueNumber(soapModel.getIssueNumber());
		model.setTitle(soapModel.getTitle());
		model.setAuthor(soapModel.getAuthor());
		model.setOrder(soapModel.getOrder());
		model.setContent(soapModel.getContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IssueArticle> toModels(IssueArticleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<IssueArticle> models = new ArrayList<IssueArticle>(
			soapModels.length);

		for (IssueArticleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public IssueArticleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _issueArticleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIssueArticleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _issueArticleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IssueArticle.class;
	}

	@Override
	public String getModelClassName() {
		return IssueArticle.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<IssueArticle, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<IssueArticle, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IssueArticle, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((IssueArticle)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<IssueArticle, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<IssueArticle, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(IssueArticle)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<IssueArticle, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<IssueArticle, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, IssueArticle>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			IssueArticle.class.getClassLoader(), IssueArticle.class,
			ModelWrapper.class);

		try {
			Constructor<IssueArticle> constructor =
				(Constructor<IssueArticle>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<IssueArticle, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<IssueArticle, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<IssueArticle, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<IssueArticle, Object>>();
		Map<String, BiConsumer<IssueArticle, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<IssueArticle, ?>>();

		attributeGetterFunctions.put("uuid", IssueArticle::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<IssueArticle, String>)IssueArticle::setUuid);
		attributeGetterFunctions.put(
			"issueArticleId", IssueArticle::getIssueArticleId);
		attributeSetterBiConsumers.put(
			"issueArticleId",
			(BiConsumer<IssueArticle, Long>)IssueArticle::setIssueArticleId);
		attributeGetterFunctions.put(
			"issueNumber", IssueArticle::getIssueNumber);
		attributeSetterBiConsumers.put(
			"issueNumber",
			(BiConsumer<IssueArticle, Long>)IssueArticle::setIssueNumber);
		attributeGetterFunctions.put("title", IssueArticle::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<IssueArticle, String>)IssueArticle::setTitle);
		attributeGetterFunctions.put("author", IssueArticle::getAuthor);
		attributeSetterBiConsumers.put(
			"author",
			(BiConsumer<IssueArticle, String>)IssueArticle::setAuthor);
		attributeGetterFunctions.put("order", IssueArticle::getOrder);
		attributeSetterBiConsumers.put(
			"order", (BiConsumer<IssueArticle, Long>)IssueArticle::setOrder);
		attributeGetterFunctions.put("content", IssueArticle::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<IssueArticle, String>)IssueArticle::setContent);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getIssueArticleId() {
		return _issueArticleId;
	}

	@Override
	public void setIssueArticleId(long issueArticleId) {
		_issueArticleId = issueArticleId;
	}

	@JSON
	@Override
	public long getIssueNumber() {
		return _issueNumber;
	}

	@Override
	public void setIssueNumber(long issueNumber) {
		_issueNumber = issueNumber;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@JSON
	@Override
	public long getOrder() {
		return _order;
	}

	@Override
	public void setOrder(long order) {
		_order = order;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, IssueArticle.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IssueArticle toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, IssueArticle>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IssueArticleImpl issueArticleImpl = new IssueArticleImpl();

		issueArticleImpl.setUuid(getUuid());
		issueArticleImpl.setIssueArticleId(getIssueArticleId());
		issueArticleImpl.setIssueNumber(getIssueNumber());
		issueArticleImpl.setTitle(getTitle());
		issueArticleImpl.setAuthor(getAuthor());
		issueArticleImpl.setOrder(getOrder());
		issueArticleImpl.setContent(getContent());

		issueArticleImpl.resetOriginalValues();

		return issueArticleImpl;
	}

	@Override
	public int compareTo(IssueArticle issueArticle) {
		long primaryKey = issueArticle.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof IssueArticle)) {
			return false;
		}

		IssueArticle issueArticle = (IssueArticle)object;

		long primaryKey = issueArticle.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<IssueArticle> toCacheModel() {
		IssueArticleCacheModel issueArticleCacheModel =
			new IssueArticleCacheModel();

		issueArticleCacheModel.uuid = getUuid();

		String uuid = issueArticleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			issueArticleCacheModel.uuid = null;
		}

		issueArticleCacheModel.issueArticleId = getIssueArticleId();

		issueArticleCacheModel.issueNumber = getIssueNumber();

		issueArticleCacheModel.title = getTitle();

		String title = issueArticleCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			issueArticleCacheModel.title = null;
		}

		issueArticleCacheModel.author = getAuthor();

		String author = issueArticleCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			issueArticleCacheModel.author = null;
		}

		issueArticleCacheModel.order = getOrder();

		issueArticleCacheModel.content = getContent();

		String content = issueArticleCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			issueArticleCacheModel.content = null;
		}

		return issueArticleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<IssueArticle, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<IssueArticle, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IssueArticle, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((IssueArticle)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<IssueArticle, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<IssueArticle, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IssueArticle, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((IssueArticle)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, IssueArticle>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _issueArticleId;
	private long _issueNumber;
	private String _title;
	private String _author;
	private long _order;
	private String _content;
	private long _columnBitmask;
	private IssueArticle _escapedModel;

}